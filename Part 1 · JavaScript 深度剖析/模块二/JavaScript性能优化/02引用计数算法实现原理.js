// 引用计数算法原理
// 算法核心思想：设置引用数，判断当前引用数是否为0

// 引用计数器：引用关系改变时，引用计数器会修改引用数字

// 优点：
  // 1.发现垃圾时立即回收；
  // 2.最大限度减少程序卡顿。（当内存即将占满时，由于引用计数器随时监控着引用数为0的对象空间，当引用计数找到引用数为0的对象空间时马上进行释放）
// 缺点：
  // 1.无法回收循环引用的对象；
  // 2.时间开销大。（需要随时维护引用数值的修改）


  // 对象的循环引用，这种关系无法被释放
  function fn() {
    const obj1 = {}
    const obj2 = {}
    obj1.name = obj2
    obj2.name = obj1
    return 'fnfnfn'
  }
  fn()